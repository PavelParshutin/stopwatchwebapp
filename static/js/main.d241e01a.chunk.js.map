{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","seconds","setSeconds","status","setStatus","useEffect","stream$","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","click","fromEvent","pauseRef","current","buffer","debounceTime","map","list","length","filter","count","useRef","className","Date","toISOString","slice","onClick","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAKe,SAASA,IAAO,IAAD,EACEC,mBAAS,GADX,mBACrBC,EADqB,KACZC,EADY,OAEAF,mBAAS,QAFT,mBAErBG,EAFqB,KAEbC,EAFa,KAI5BC,qBAAU,WACR,IAAMC,EAAU,IAAIC,IAQhB,OAPJC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACM,UAAXR,GACFD,GAAW,SAAAU,GAAG,OAAIA,EAAM,UAGpB,WACJN,EAAQO,OACRP,EAAQQ,cAEb,CAACX,IAEJE,qBAAU,WACR,IAAMU,EAAQC,YAAUC,EAASC,QAAS,SACrBH,EAAMN,KAAKU,YAAOJ,EAAMN,KAAKW,YAAa,OAC/DC,aAAI,SAAAC,GAAS,OAAOA,EAAKC,UACzBC,aAAO,SAAAC,GAAK,OAAc,IAAVA,MACHd,WAAU,kBAAMP,EAAU,cACvC,IACF,IAAMa,EAAWS,iBAAO,MAgBxB,OACE,gCACE,sBAAKC,UAAU,QAAf,cAAyB,IAAIC,KAAK3B,GAAS4B,cAAcC,MAAM,GAAI,OACnE,sBAAKH,UAAU,WAAf,UACE,wBAAQA,UAAU,MAAMI,QAlBV,WACN,UAAT5B,GACDC,EAAU,QACVF,EAAW,IAEXE,EAAU,UAaR,wBACA,wBAAQuB,UAAU,MAAMI,QAThB,WACZ7B,EAAW,IAQP,mBACA,wBAAQyB,UAAU,MAAMK,IAAKf,EAA7B,wBCrDR,IAYegB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d241e01a.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { fromEvent, interval, Subject } from \"rxjs\";\nimport { buffer, debounceTime, filter, map, takeUntil } from \"rxjs/operators\";\nimport './App.css';\n\nexport default function App() {\n  const [seconds, setSeconds] = useState(0);\n  const [status, setStatus] = useState(\"stop\");\n\n  useEffect(() => {\n    const stream$ = new Subject();\n    interval(1000)\n      .pipe(takeUntil(stream$))\n      .subscribe(() => {\n        if (status === \"start\") {\n          setSeconds(val => val + 1000);\n        }\n      });\n        return() =>{\n          stream$.next()\n          stream$.complete()\n        }\n  }, [status]);\n\n  useEffect(()=>{\n    const click = fromEvent(pauseRef.current, 'click')\n    const doubleClick$ = click.pipe(buffer(click.pipe(debounceTime(300))),\n    map(list => {return list.length}),\n    filter(count => count === 2))\n    doubleClick$.subscribe(() => setStatus(\"pause\"))\n  },[])\n  const pauseRef = useRef(null)\n\n  const startStopBtn =() => {\n    if(status==='start'){\n      setStatus(\"stop\");\n      setSeconds(0);\n    }else if(status==='stop'){\n      setStatus(\"start\");\n    }else{\n      setStatus('start')\n    }\n  }\n  const reset = () => {\n    setSeconds(0);\n  }\n\n  return (\n    <div>\n      <div className='timer'> {new Date(seconds).toISOString().slice(11, 19)}</div>\n      <div className=\"btnBlock\">\n        <button className='btn' onClick={startStopBtn}>start/stop</button>\n        <button className='btn' onClick={reset}>Reset</button>\n        <button className='btn' ref={pauseRef}>Wait</button>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}